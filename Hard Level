import java.util.*;
import java.util.stream.*;
import java.util.function.*;

class Product {
    String name;
    String category;
    double price;

    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String toString() {
        return name + " | " + category + " | $" + price;
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 1000),
            new Product("Phone", "Electronics", 800),
            new Product("Shirt", "Clothing", 50),
            new Product("Jeans", "Clothing", 70),
            new Product("TV", "Electronics", 1500),
            new Product("Blender", "Home Appliances", 120),
            new Product("Toaster", "Home Appliances", 45)
        );

        // 1. Group products by category
        System.out.println("Products grouped by category:");
        Map<String, List<Product>> grouped = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));
        grouped.forEach((cat, list) -> {
            System.out.println(cat + ":");
            list.forEach(p -> System.out.println("  " + p));
        });

        // 2. Most expensive product in each category
        System.out.println("\nMost expensive product in each category:");
        Map<String, Optional<Product>> maxByCategory = products.stream()
            .collect(Collectors.groupingBy(
                p -> p.category,
                Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
            ));
        maxByCategory.forEach((cat, product) -> 
            System.out.println(cat + ": " + product.orElse(null)));

        // 3. Average price of all products
        double avgPrice = products.stream()
            .mapToDouble(p -> p.price)
            .average()
            .orElse(0.0);
        System.out.printf("\nAverage price of all products: $%.2f\n", avgPrice);
    }
}
